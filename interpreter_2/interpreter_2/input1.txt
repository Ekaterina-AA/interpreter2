public string PlaneEquationsToString(double A, double B, double C, double D)
{
    var sb = new StringBuilder();
    sb.AppendLine(@"\begin{align*}");
    sb.AppendLine(@"\text{Общее уравнение плоскости: }");
    sb.AppendLine($@"{A:0.###}x + {B:0.###}y + {C:0.###}z + {D:0.###} = 0\\");
    
    // Уравнение в отрезках
    if (Math.Abs(A*B*C*D) > 1e-10)
    {
        sb.AppendLine(@"\text{Уравнение в отрезках: }");
        sb.AppendLine($@"\frac{{x}}{{{-D/A:0.###}}} + \frac{{y}}{{{-D/B:0.###}}} + \frac{{z}}{{{-D/C:0.###}}} = 1\\");
    }
    
    // Нормальное уравнение
    double norm = Math.Sqrt(A*A + B*B + C*C);
    sb.AppendLine(@"\text{Нормальное уравнение: }");
    sb.AppendLine($@"\frac{{{A:0.###}x + {B:0.###}y + {C:0.###}z + {D:0.###}}}{{{norm:0.###}}} = 0\\");
    
    sb.AppendLine(@"\end{align*}");
    return sb.ToString();
}

public string LineEquationsNDToString(Vector point, Vector direction)
{
    var sb = new StringBuilder();
    sb.AppendLine(@"\begin{align*}");
    sb.AppendLine(@"\text{Параметрические уравнения прямой: }\\");
    
    for (int i = 0; i < point.Dimension; i++)
    {
        sb.AppendLine($@"x_{i+1} = {point.Components[i]:0.###} + {direction.Components[i]:0.###}t\\");
    }
    
    // Канонические уравнения (если возможно)
    if (point.Dimension == 3)
    {
        sb.AppendLine(@"\text{Канонические уравнения: }");
        sb.AppendLine($@"\frac{{x - {point.Components[0]:0.###}}}{{{direction.Components[0]:0.###}}} = " +
                     $@"\frac{{y - {point.Components[1]:0.###}}}{{{direction.Components[1]:0.###}}} = " +
                     $@"\frac{{z - {point.Components[2]:0.###}}}{{{direction.Components[2]:0.###}}}\\");
    }
    
    sb.AppendLine(@"\end{align*}");
    return sb.ToString();
}

public string PlanesIntersectionToString(double A1, double B1, double C1, double D1, 
                                        double A2, double B2, double C2, double D2)
{
    var sb = new StringBuilder();
    sb.AppendLine(@"\begin{align*}");
    sb.AppendLine(@"\text{Уравнения плоскостей: }");
    sb.AppendLine($@"1: {A1:0.###}x + {B1:0.###}y + {C1:0.###}z + {D1:0.###} = 0\\");
    sb.AppendLine($@"2: {A2:0.###}x + {B2:0.###}y + {C2:0.###}z + {D2:0.###} = 0\\");
    
    // Направляющий вектор прямой пересечения
    Vector direction = new Vector(new double[] {
        B1*C2 - B2*C1,
        A2*C1 - A1*C2,
        A1*B2 - A2*B1
    });
    
    // Находим точку на прямой
    double x0 = 0, y0 = 0, z0 = 0;
    // Решаем систему для z=0
    double det = A1*B2 - A2*B1;
    
    if (Math.Abs(det) > 1e-10)
    {
        x0 = (B1*D2 - B2*D1)/det;
        y0 = (A2*D1 - A1*D2)/det;
    }
    
    sb.AppendLine(@"\text{Прямая пересечения: }");
    sb.AppendLine(@"\text{Параметрические уравнения: }");
    sb.AppendLine($@"x = {x0:0.###} + {direction.Components[0]:0.###}t\\");
    sb.AppendLine($@"y = {y0:0.###} + {direction.Components[1]:0.###}t\\");
    sb.AppendLine($@"z = {z0:0.###} + {direction.Components[2]:0.###}t\\");
    
    sb.AppendLine(@"\text{Канонические уравнения: }");
    sb.AppendLine($@"\frac{{x - {x0:0.###}}}{{{direction.Components[0]:0.###}}} = " +
                 $@"\frac{{y - {y0:0.###}}}{{{direction.Components[1]:0.###}}} = " +
                 $@"\frac{{z - {z0:0.###}}}{{{direction.Components[2]:0.###}}}\\");
    
    sb.AppendLine(@"\end{align*}");
    return sb.ToString();
}

public string LineProjectionOnPlaneToString(double planeA, double planeB, double planeC, double planeD,
                                           Vector linePoint, Vector lineDirection)
{
    var sb = new StringBuilder();
    sb.AppendLine(@"\begin{align*}");
    sb.AppendLine(@"\text{Уравнение плоскости: }");
    sb.AppendLine($@"{planeA:0.###}x + {planeB:0.###}y + {planeC:0.###}z + {planeD:0.###} = 0\\");
    
    sb.AppendLine(@"\text{Исходная прямая: }");
    sb.AppendLine($@"\mathbf{{r}} = " + linePoint.ToLatexString() + " + t" + lineDirection.ToLatexString() + @"\\");
    
    // Находим проекцию направляющего вектора
    Vector normal = new Vector(new double[] {planeA, planeB, planeC});
    double dot = lineDirection.Dot(normal);
    
    Vector projDirection = lineDirection.Subtract(normal.Multiply(dot/normal.Dot(normal)));
    
    // Находим точку пересечения прямой и плоскости
    double t = -(planeA*linePoint.Components[0] + planeB*linePoint.Components[1] + 
                planeC*linePoint.Components[2] + planeD) / dot;
    Vector intersection = linePoint.Add(lineDirection.Multiply(t));
    
    sb.AppendLine(@"\text{Проекция прямой: }");
    sb.AppendLine($@"\mathbf{{r}} = " + intersection.ToLatexString() + " + t" + projDirection.ToLatexString() + @"\\");
    
    sb.AppendLine(@"\end{align*}");
    return sb.ToString();
}